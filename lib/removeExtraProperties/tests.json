[
    {
      "description": "remove undefined property",
      "schema": {
        "$id": "https://example.com/0",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "tests": [
        {
          "description": "When the schema is applied to an empty object, the object should not change",
          "instance": {},
          "expected": {}
        },
        {
          "description": "When the schema is applied to an object where 'name' exists, the object should not change",
          "instance": {
            "name": "John"
          },
          "expected": {
            "name": "John"
          }
        },
        {
          "description": "When the schema is applied to an object where 'age' property exists, the property should be removed",
          "instance": {
            "name": "John",
            "age": 30
          },
          "expected": {
            "name": "John"
          }
        },
        {
          "description": "When the schema is applied to an object where only 'age' property exists, the property should be removed",
          "instance": {
            "age": 30
          },
          "expected": {}
        }
      ]
    },
    {
      "description": "remove nested undefined properties",
      "schema": {
        "$id": "https://example.com/1",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "person": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "number"
              }
            }
          }
        }
      },
      "tests": [
        {
          "description": "Given an empty object, nothing should be changed",
          "instance": {},
          "expected": {}
        },
        {
          "description": "Given 'person' with an empty object, nothing should be changed",
          "instance": { "person": {} },
          "expected": { "person": {} }
        },
        {
          "description": "Given an object with properties other than 'name' and 'age', those properties should be removed",
          "instance": {
            "person": {
                "name": "Doe",
                "email": "foo@bar.com"
            }
          },
          "expected": {
            "person": {
              "name": "Doe"
            }
          }
        },
        {
          "description": "Given an object with the 'name' and 'age' property already set, the property is unchanged",
          "instance": {
            "person": {
              "name": "Rocky",
              "age": 49
            }
          },
          "expected": {
            "person": {
              "name": "Rocky",
              "age": 49
            }
          }
        }
      ]
    },
    {
      "description": "remove items from array",
      "schema": {
        "$id": "https://example.com/2",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "numbers": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "tests": [
        {
          "description": "When the schema is applied to an object with an array, nothing should be changed",
          "instance": { 
            "numbers": [1, 2, 3]
        },
        "expected": {
            "numbers": [1, 2, 3]
          }
        }
      ]
    },
    {
      "description": "remove items from array",
      "schema": {
        "$id": "https://example.com/3",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "object",
        "properties": {
          "numbers": {
            "type": "array",
            "prefixItems": [
                { "type": "number" },
                { "type": "string" }
            ]
          }
        }
      },
      "tests": [
        {
          "description": "When the schema is applied to an object with an array, undefined items should be removed",
          "instance": { 
            "numbers": [1, "foo", true]
        },
        "expected": {
            "numbers": [1, "foo"]
          }
        },
        {
          "description": "When the schema is applied to an object with an array with no undefined items, nothing should be changed",
          "instance": { 
            "numbers": [1, "foo"]
        },
        "expected": {
            "numbers": [1, "foo"]
          }
        }
      ]
    },
    {
      "description": "Handle invalid schema",
      "schema": {
        "$id": "https://example.com/4",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "invalid"
      },
      "tests": [
        {
          "description": "When the schema is invalid, an error should be thrown",
          "instance": {},
          "expected": "Invalid Schema"
        }
      ]
    },
    {
      "description": "Undefined item in an array gets removed",
      "schema": {
        "$id": "https://example.com/5",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "array",
        "prefixItems": [
          {
            "type": "number"
          }
        ]
      },
      "tests": [
        {
          "description": "given an empty array, it should remain unchanged",
          "instance": [],
          "expected": []
        },
        {
          "description": "given an array with the unevaluated items, they should be removed",
          "instance": [1, 2, 3, "foo", true],
          "expected": [1]
        }
      ]
    },
    {
      "description": "Unevaluated nested items gets removed",
      "schema": {
        "$id": "https://example.com/6",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "array",
        "prefixItems": [
          {
            "type": "array",
            "prefixItems": [
              {
                "type": "number"
              }
            ]
          }
        ]
      },
      "tests": [
        {
          "description": "given an empty array, it should remain unchanged",
          "instance": [],
          "expected": []
        },
        {
          "description": "given an item with undefined items in array, the undefined items should be removed",
          "instance": [[42, "foo", false]],
          "expected": [[42]]
        },
        {
          "description": "given an array with only defined items present, the array is unchanged",
          "instance": [[42]],
          "expected": [[42]]
        }
      ]
    },
    {
      "description": "Add defaults to array items",
      "schema": {
        "$id": "https://example.com/7",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "type": "array",
        "prefixItems": [true],
        "items": {
          "type": "object",
          "properties": {
            "foo": {
              "type": "number"
            }
          }
        }
      },
      "tests": [
        {
          "description": "Any items with properties other than foo should have those properties removed",
          "instance": [
            {},
            { "foo": 42, "bar": "baz" },
            { "foo": 42 }
          ],
          "expected": [
            {},
            { "foo": 42 },
            { "foo": 42 }
          ]
        }
      ]
    }
  ]
  